{"version":3,"sources":["App.module.css","API.tsx","components/questionCard/QuestionCard.tsx","theme/theme.tsx","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","shuffleArray","incorrect_answers","correct_answer","array","sort","Math","random","QuestionCard","callback","userAnswer","questionNum","totalQuestions","matches","useMediaQuery","answerResultStyle","answer","correctAnswer","color","borderColor","undefined","Card","className","classes","question_card","style","overflow","CardContent","Typography","number","dangerouslySetInnerHTML","__html","CardActions","display","flexDirection","alignItems","index","key","buttons","Button","id","variant","disabled","value","onClick","theme","createMuiTheme","palette","primary","main","secondary","blue","useStyles","makeStyles","quiz_form","marginTop","typography","textAlign","fontSize","App","styles","useState","setTotalQuestions","EASY","setDifficulty","loading","setLoading","questions","setQuestions","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","highscore","setHighscore","startQuiz","newQuestions","StrictMode","ThemeProvider","app","container","Fragment","InputLabel","shrink","Select","labelId","defaultValue","onChange","e","target","MenuItem","MEDIUM","HARD","start","size","margin","CircularProgress","length","currentTarget","correct","prev","answerObject","type","next","preventDefault","nextQuestion","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd53e38b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2L8sw\",\"container\":\"App_container__uDKs_\"};","export interface Question {\r\n    category: string,\r\n    difficulty: string,\r\n    type: string,\r\n    question: string,\r\n    correct_answer: string,\r\n    incorrect_answers: string[]\r\n}\r\n\r\n\r\n\r\nexport type QuestionState = Question & { answers: string[] }\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\"\r\n}\r\n\r\nexport const fetchQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n\r\n    const data = await (await fetch(endpoint)).json();\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n        }\r\n    ))\r\n}\r\n\r\n// shuffle answers from the api\r\nconst shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5);","import React from \"react\";\r\nimport classes from \"./QuestionCard.module.css\";\r\nimport { Typography, CardActions, Card, CardContent, Button, useMediaQuery } from \"@material-ui/core\";\r\n\r\n// specify types of this component's props\r\ninterface Props {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNum: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nexport interface AnswerObject {\r\n    answer: string;\r\n    correct: boolean;\r\n    correctAnswer: string;\r\n}\r\n\r\n\r\nconst QuestionCard: React.FC<Props> = ({ question, answers, callback, userAnswer, questionNum, totalQuestions }) => {\r\n    // material ui media query for card component\r\n    const matches = useMediaQuery(\"(max-width: 420px)\");\r\n    \r\n    // styling for choice buttons\r\n    // red = wrong / green = correct\r\n    const answerResultStyle = (answer: string) => {\r\n        if (answer === userAnswer?.correctAnswer)\r\n            return {\r\n                color: \"green\",\r\n                borderColor: \"green\",\r\n            };\r\n\r\n        if (answer !== userAnswer?.correctAnswer && userAnswer !== undefined)\r\n            return {\r\n                color: \"red\",\r\n                borderColor: \"red\",\r\n            };\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.question_card} style={matches ? { overflow: \"scroll\" } : undefined}>\r\n            <CardContent>\r\n                <Typography className={classes.number}>\r\n                    {questionNum} / {totalQuestions}\r\n                </Typography>\r\n                <Typography>\r\n                    <p dangerouslySetInnerHTML={{ __html: question }} />\r\n                </Typography>\r\n                <CardActions\r\n                    style={matches ? { display: \"flex\", flexDirection: \"column\", alignItems: \"center\" } : undefined}\r\n                >\r\n                    {answers.map((answer, index) => (\r\n                        <div key={index} className={classes.buttons}>\r\n                            <Button\r\n                                style={answerResultStyle(answer)}\r\n                                id=\"button\"\r\n                                variant=\"outlined\"\r\n                                disabled={userAnswer ? true : false}\r\n                                value={answer}\r\n                                onClick={callback}\r\n                            >\r\n                                <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                            </Button>\r\n                        </div>\r\n                    ))}\r\n                </CardActions>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default QuestionCard;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { green, blue } from \"@material-ui/core/colors\";\r\n\r\n// create custom material-ui themee\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#329D9C\"\r\n        },\r\n        secondary: blue,\r\n    }   \r\n});","import React, { useState } from \"react\";\nimport classes from \"./App.module.css\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nimport { fetchQuestions, Difficulty, QuestionState } from \"./API\";\nimport QuestionCard from \"./components/questionCard/QuestionCard\";\nimport { AnswerObject } from \"./components/questionCard/QuestionCard\";\n\nimport { theme } from \"./theme/theme\";\nimport { ThemeProvider, makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Typography, InputLabel, Select, MenuItem } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n    quiz_form: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: \"2em\",\n    },\n    typography: {\n        textAlign: \"center\",\n        fontSize: \"1.3rem\",\n    },\n});\n\nconst App = () => {\n    const styles = useStyles();\n\n    // params for questions' difficulty and total numbers (api)\n    const [totalQuestions, setTotalQuestions] = useState(10);\n    const [difficulty, setDifficulty] = useState(Difficulty.EASY);\n\n    const [loading, setLoading] = useState(false);\n    const [questions, setQuestions] = useState<QuestionState[]>([]);\n    const [number, setNumber] = useState(0);\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n    const [score, setScore] = useState(0);\n    const [gameOver, setGameOver] = useState(true);\n    const [highscore, setHighscore] = useState(0);\n\n    const startQuiz = async () => {\n        setLoading(true);\n        setGameOver(false);\n\n        // fetch questions from API\n        const newQuestions = await fetchQuestions(totalQuestions, difficulty);\n\n        setQuestions(newQuestions);\n        setScore(0);\n        setUserAnswers([]);\n        setNumber(0);\n        setLoading(false);\n    };\n\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (!gameOver) {\n            // get user answer from button value\n            const answer = e.currentTarget.value;\n            // check answer agains correct answer\n            const correct = questions[number].correct_answer === answer;\n            // add score if answer if correct\n            // change color of selected button (red = wrong, green = correct)\n            if (correct) setScore((prev) => prev + 1);\n\n            // save answer in the array for user answer\n            const answerObject = {\n                answer,\n                correct,\n                correctAnswer: questions[number].correct_answer,\n            };\n\n            setUserAnswers((prev) => [...prev, answerObject]);\n        }\n    };\n\n    const nextQuestion = (e: any) => {\n        e.preventDefault();\n        // move on to next question if not on last question\n        const nextQuestion = number + 1;\n\n        if (nextQuestion === totalQuestions) {\n            setGameOver(true);\n            if (score > highscore) setHighscore(score);\n        } else {\n            setNumber(nextQuestion);\n        }\n    };\n\n    const handleChangeDifficulty = (e: any) => setDifficulty(e.target.value);\n\n    const handleChangeTotalQuestions = (e: any) => setTotalQuestions(e.target.value);\n\n    return (\n        <React.StrictMode>\n            <ThemeProvider theme={theme}>\n                <div className={classes.app}>\n                    <div className={classes.container}>\n                        <h1>QUIZARD</h1>\n\n                        {gameOver ? (\n                            <React.Fragment>\n                                <Typography className={styles.typography} variant=\"h5\">\n                                    How far can your knowledge take you?\n                                </Typography>\n\n                                <form className={styles.quiz_form}>\n                                    <InputLabel shrink={true} id=\"difficulty\">\n                                        DIFFICULTY\n                                    </InputLabel>\n                                    <Select\n                                        labelId=\"difficulty\"\n                                        id=\"select-difficulty\"\n                                        defaultValue={difficulty}\n                                        value={difficulty}\n                                        onChange={handleChangeDifficulty}\n                                    >\n                                        <MenuItem value={Difficulty.EASY}>EASY</MenuItem>\n                                        <MenuItem value={Difficulty.MEDIUM}>MEDIUM</MenuItem>\n                                        <MenuItem value={Difficulty.HARD}>HARD</MenuItem>\n                                    </Select>\n                                    <InputLabel style={{ marginTop: \"1em\" }} shrink={true} id=\"total-questions\">\n                                        NUMBER OF QUESTIONS\n                                    </InputLabel>\n                                    <Select\n                                        labelId=\"total-questions\"\n                                        id=\"select-total-questions\"\n                                        defaultValue={totalQuestions}\n                                        value={totalQuestions}\n                                        onChange={handleChangeTotalQuestions}\n                                    >\n                                        <MenuItem value={5}>5</MenuItem>\n                                        <MenuItem value={10}>10</MenuItem>\n                                        <MenuItem value={15}>15</MenuItem>\n                                        <MenuItem value={20}>20</MenuItem>\n                                        <MenuItem value={25}>25</MenuItem>\n                                        <MenuItem value={30}>30</MenuItem>\n                                        <MenuItem value={35}>35</MenuItem>\n                                        <MenuItem value={40}>40</MenuItem>\n                                        <MenuItem value={45}>45</MenuItem>\n                                        <MenuItem value={50}>50</MenuItem>\n                                    </Select>\n\n                                    <Button\n                                        style={{ marginTop: \"2em\" }}\n                                        className={classes.start}\n                                        onClick={startQuiz}\n                                        size=\"medium\"\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                    >\n                                        START QUIZ\n                                    </Button>\n                                </form>\n                            </React.Fragment>\n                        ) : null}\n\n                        {loading && (\n                            <React.Fragment>\n                                <Typography variant=\"h6\" color=\"secondary\" style={{ margin: \"0.7em 0\" }}>\n                                    Preparing questions...\n                                </Typography>\n                                <CircularProgress color=\"secondary\" />\n                            </React.Fragment>\n                        )}\n\n                        {userAnswers.length === totalQuestions && !gameOver ? (\n                            <Typography className={styles.typography} variant=\"h5\" color=\"secondary\">\n                                {score > highscore ? \"NEW HIGHSCORE!\" : \"WELL DONE!\"}\n                            </Typography>\n                        ) : null}\n\n                        {!gameOver && !loading ? (\n                            <Typography className={classes.score} variant=\"h6\" style={{ marginTop: \"3em\" }}>\n                                SCORE: {score}\n                            </Typography>\n                        ) : null}\n\n                        {!loading && !gameOver && (\n                            <QuestionCard\n                                questionNum={number + 1}\n                                totalQuestions={totalQuestions}\n                                question={questions[number].question}\n                                answers={questions[number].answers}\n                                userAnswer={userAnswers ? userAnswers[number] : undefined}\n                                callback={checkAnswer}\n                            />\n                        )}\n\n                        {!loading && !gameOver && userAnswers.length === number + 1 ? (\n                            <Button\n                                type=\"submit\"\n                                style={{ marginTop: \"1em\" }}\n                                variant=\"contained\"\n                                size=\"large\"\n                                color=\"primary\"\n                                className={classes.next}\n                                onClick={nextQuestion}\n                            >\n                                {userAnswers.length === totalQuestions ? \"RETAKE QUIZ\" : \"Next Question\"}\n                            </Button>\n                        ) : null}\n                    </div>\n                </div>\n            </ThemeProvider>\n        </React.StrictMode>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}